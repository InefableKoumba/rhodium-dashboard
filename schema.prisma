// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  COMMERCIAL
}

model User {
  id                           String             @id @default(uuid())
  email                        String             @unique
  password                     String
  name                         String
  googleId                     String?
  avatar                       String?
  hasDeletedAccount            Boolean            @default(false)
  isBlocked                    Boolean            @default(false)
  sponsorshipCode              String             @unique
  role                         UserRole           @default(USER)
  credits                      Int                @default(0)
  countryCode                  String?
  phoneNumber                  String?            @unique()
  isPhoneNumberPublic          Boolean            @default(true)
  createdAt                    DateTime           @default(now())
  updatedAt                    DateTime           @updatedAt
  events                       Event[]            @relation("EventOrganizer")
  tickets                      Ticket[]
  Invitation                   Invitation[]
  likedEvents                  Event[]            @relation("EventLikes")
  creditPurchases              CreditPurchase[]
  PasswordResetOTP             PasswordResetOTP[]
  enteredSponsorCode           String?
  deviceUsedForAccountCreation String?
  sponsored                    Sponsorship[]      @relation("SponsorRelation")
  sponsor                      Sponsorship?       @relation("GodsonRelation")
  orders                       Order[]
  followersCount               Int                @default(0)
  followingCount               Int                @default(0)
  following                    Follow[]           @relation("Following")
  followers                    Follow[]           @relation("Followers")
  comments                     Comment[]
  EventView                    EventView[]
  EventShare                   EventShare[]
}

model PushNotificationToken {
  id        String   @id @default(uuid())
  userId    String?
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, token])
}

enum SponsorshipStatus {
  PENDING
  PAID
  REJECTED
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  flagCount Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?
}

model EventView {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deviceId String
  eventId  String
  userId   String?

  event Event @relation(fields: [eventId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  @@unique([deviceId, eventId])
}

model EventShare {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deviceId String
  eventId  String
  userId   String?

  event Event @relation(fields: [eventId], references: [id])
  user  User? @relation(fields: [userId], references: [id])

  @@unique([deviceId, eventId])
}

model Sponsorship {
  id               String            @id @default(uuid())
  sponsorId        String
  godsonId         String            @unique
  price            Float             @default(50)
  status           SponsorshipStatus @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime?
  rejectionReason  String?
  updatedByAdminId String?
  sponsor          User              @relation("SponsorRelation", fields: [sponsorId], references: [id])
  godson           User              @relation("GodsonRelation", fields: [godsonId], references: [id])
}

model PasswordResetOTP {
  id        String   @id @default(uuid())
  email     String
  user      User     @relation(fields: [email], references: [email])
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model RegistrationOTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Admin {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String
  lastname       String
  firstname      String
  isBlocked      Boolean  @default(false)
  role           String   @default("ADMIN") // ADMIN, SUPER_ADMIN
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  approvedEvents Event[]  @relation("EventApproval")
}

model Event {
  id              String          @id @default(uuid())
  title           String
  description     String
  startsAt        DateTime
  endsAt          DateTime
  scanCode        String
  isArchived      Boolean         @default(false)
  city            String
  location        String
  isPrivate       Boolean         @default(false)
  isFree          Boolean         @default(false)
  coverImageId    String
  imageIds        String[]        @default([])
  videoId         String?
  isFeatured      Boolean         @default(false)
  status          EventStatus     @default(PENDING)
  rejectionReason String?
  approvedBy      Admin?          @relation("EventApproval", fields: [approvedById], references: [id])
  approvedById    String?
  approvedAt      DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  organizer       User            @relation("EventOrganizer", fields: [organizerId], references: [id])
  organizerId     String
  tickets         Ticket[]
  categories      EventCategory[]
  invitations     Invitation[]
  likedBy         User[]          @relation("EventLikes")
  likesCount      Int             @default(0)
  ticketTypes     TicketType[]
  tables          Table[]
  comments        Comment[]
  commentsCount   Int             @default(0)
  sharesCount     Int             @default(0)
  viewsCount      Int             @default(0)
  EventView       EventView[]
  EventShare      EventShare[]
  Order           Order[]
}

enum EventStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TicketStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DELETED_BY_USER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  SEMINAR
  CONCERT
  EXHIBITION
  FESTIVAL
  SPORTS
  NETWORKING
  TECHNOLOGY
  RELIGION
  PHILOSOPHY
  LITERATURE
  ART
  MUSIC
  OTHER
  SHOW
  MOVIE_SCREENING
  PARTY
  MASTERCLASS
  TRAINING
  FORUM
  FAIR
  LAUNCH
  OPEN_HOUSE
  CELEBRATION
  KERMESSE
}

model TicketType {
  id          String      @id @default(uuid())
  name        String // e.g., "Standard", "VIP", "VVIP"
  price       Float
  maxQuantity Int
  event       Event       @relation(fields: [eventId], references: [id])
  eventId     String
  tickets     Ticket[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]

  @@unique([eventId, name])
}

model Ticket {
  id           String       @id @default(uuid())
  event        Event        @relation(fields: [eventId], references: [id])
  eventId      String
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  scanned      Boolean      @default(false)
  scannedAt    DateTime?
  ticketType   TicketType?  @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String?
  status       TicketStatus @default(PENDING)
  orderItem    OrderItem?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Invitation   Invitation[]
}

model Invitation {
  id        String           @id @default(uuid())
  event     Event            @relation(fields: [eventId], references: [id])
  eventId   String
  user      User             @relation(fields: [userId], references: [id])
  table     Table?           @relation(fields: [tableId], references: [id])
  tableId   String?
  userId    String
  ticket    Ticket?          @relation(fields: [ticketId], references: [id])
  ticketId  String?
  status    InvitationStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Table {
  id         String       @id @default(uuid())
  name       String
  seats      Int
  eventId    String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Invitation Invitation[]
  Event      Event        @relation(fields: [eventId], references: [id])
}

model CreditPack {
  id        String           @id @default(uuid())
  name      String // e.g., "Basic", "Premium"
  credits   Int
  price     Float
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  purchases CreditPurchase[]
}

model CreditPurchase {
  id           String               @id @default(uuid())
  user         User                 @relation(fields: [userId], references: [id])
  userId       String
  creditPack   CreditPack           @relation(fields: [creditPackId], references: [id])
  creditPackId String
  phoneNumber  String
  status       CreditPurchaseStatus @default(PENDING)
  paymentId    String? // Mobile money transaction ID
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
}

enum CreditPurchaseStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

enum AdvertisementStatus {
  ACTIVE
  INACTIVE
}

model Advertisement {
  id        String    @id @default(uuid())
  title     String?
  imageId   String?
  videoId   String?
  expiresAt DateTime?
  link      String?
  content   String?
  published Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model AppConfiguration {
  id                               String   @id @default(uuid())
  sponsorshipPrice                 Float    @default(50)
  commissionPercentageOnTicketSale Float    @default(10)
  createdAt                        DateTime @default(now())
  updatedAt                        DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

model Order {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  phoneNumber   String
  amount        Float
  status        OrderStatus @default(PENDING)
  eventId       String?
  event         Event?      @relation(fields: [eventId], references: [id])
  paymentId     String? // Payment provider's transaction ID
  items         OrderItem[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  paidAt        DateTime?
  cancelledAt   DateTime?
  failureReason String?
}

model OrderItem {
  id           String     @id @default(uuid())
  order        Order      @relation(fields: [orderId], references: [id])
  orderId      String
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String
  ticket       Ticket     @relation(fields: [ticketId], references: [id])
  ticketId     String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
